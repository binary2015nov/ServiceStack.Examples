<!DOCTYPE html>
<html>
<head>
    <title>Northwind Web Services</title>
    <link href="default.css" rel="stylesheet" />
</head>
<body>
    <a id="logo" href="https://servicestack.net">
        <img src="img/logo-24x24.png" alt="ServiceStack.net" />
    </a>

    <div id="header-links">
        <a href="http://mono.servicestack.net/ServiceStack.Hello/">Hello World</a>
        <a href="http://todos.servicestack.net/">Todos</a>
        <a href="http://redisstackoverflow.servicestack.net/">Redis StackOverflow</a>
        <a href="http://restfiles.servicestack.net/">Rest Files</a>
        <a href="http://northwind.servicestack.net/">Northwind Database</a>
    </div>

    <a id="github" href="https://github.com/binary2015nov/ServiceStack.Examples" title="View source on GitHub">
        <img src="img/btn-github.png" alt="GitHub" /></a>

    <div>
        <h1>Northwind Web Services</h1>

        <p>
            The Northwind Web Services Example project explores different features of ServiceStack
            using data from Northwind SQlite Database.
        </p>

        <h3>Rest Services</h3>
        <p>
            ServiceStack's REST Services, are just normal Web Services with the addition of a [Route] attribute
            that allows you to provide the canonical / permanent location for your web service.
        </p>
        <table>
            <thead>
                <tr>
                    <th></th>
                    <th>Path</th>
                    <th>Formats</th>
                    <th>Code</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th>All Customers</th>
                    <td><a href="customers">customers</a></td>
                    <td class="c3"><a href="customers?format=json">json</a><a href="customers?format=xml">xml</a><a href="customers?format=html">html</a><a href="customers?format=csv">csv</a><a href="customers?format=jsv">jsv</a><a href="customers?format=x-vcard">x-vcard</a></td>
                    <td class="c4"><a href="https://github.com/binary2015nov/ServiceStack.Examples/blob/master/src/ServiceStack.Northwind/ServiceStack.Northwind.ServiceInterface/CustomersService.cs"><b>CustomersService.cs</b></a></td>
                </tr>
                <tr>
                    <th>Customer Maria Anders</th>
                    <td><a href="customers/ALFKI">customers/ALFKI</a></td>
                    <td class="c3"><a href="customers/ALFKI?format=json">json</a><a href="customers/ALFKI?format=xml">xml</a><a href="customers/ALFKI?format=html">html</a><a href="customers/ALFKI?format=csv">csv</a><a href="customers/ALFKI?format=jsv">jsv</a><a href="customers/ALFKI?format=x-vcard">x-vcard</a></td>
                    <td class="c4"><a href="https://github.com/binary2015nov/ServiceStack.Examples/blob/master/src/ServiceStack.Northwind/ServiceStack.Northwind.ServiceInterface/CustomerDetailsService.cs"><b>CustomerDetailsService.cs</b></a></td>
                </tr>
                <tr>
                    <th>Customer Maria Anders Orders</th>
                    <td><a href="customers/ALFKI/orders">customers/ALFKI/orders</a></td>
                    <td class="c3"><a href="customers/ALFKI/orders?format=json">json</a><a href="customers/ALFKI/orders?format=xml">xml</a><a href="customers/ALFKI/orders?format=html">html</a><a href="customers/ALFKI/orders?format=csv">csv</a><a href="customers/ALFKI/orders?format=jsv">jsv</a></td>
                    <td class="c4"><a href="https://github.com/binary2015nov/ServiceStack.Examples/blob/master/src/ServiceStack.Northwind/ServiceStack.Northwind.ServiceInterface/OrdersService.cs"><b>OrdersService.cs</b></a></td>
                </tr>
                <tr>
                    <th>Latest Orders</th>
                    <td><a href="orders">orders</a></td>
                    <td class="c3"><a href="orders?format=json">json</a><a href="orders?format=xml">xml</a><a href="orders?format=html">html</a><a href="orders?format=csv">csv</a><a href="orders?format=jsv">jsv</a></td>
                    <td class="c4">OrdersService.cs</td>
                </tr>
                <tr>
                    <th>Latest Orders - page 2</th>
                    <td><a href="orders/page/2">orders/page/2</a></td>
                    <td class="c3"><a href="orders/page/2?format=json">json</a><a href="orders/page/2?format=xml">xml</a><a href="orders/page/2?format=html">html</a><a href="orders/page/2?format=csv">csv</a><a href="orders/page/2?format=jsv">jsv</a></td>
                    <td class="c4">OrdersService.cs</td>
                </tr>
            </tbody>
        </table>

        <p>
            The entire data source for the Northwind project is contained in the <img src="img/database-18x18.jpg" hspace="3" />App_Data/Northwind.sqlite database
            created by this <a href="https://github.com/binary2015nov/ServiceStack.Benchmarks/blob/master/tests/ServiceStack.Northwind.Tests/PopulateDataTests.cs">unit test</a>.
        </p>

        <a href="vcard-format.htm"><img src="img/vcard-ALFKI-200.png" alt="VCard Custom MediaType" style="float:right; margin:0 100px 10px 10px;" /></a>
        <h3>Adding Custom Media Types - The VCard format</h3>
        <p>
            The Northwind database also includes the addition of the VCard custom media format.<br />
            Checkout the walk through to see how to create your own Custom Media Types with ServiceStack: <br />
            <h4><a href="vcard-format.htm">vcard-format.htm</a></h4>
        </p>

        <h3>Cached Rest Services</h3>
        <p>
            As it's important for high-performance web services, ServiceStack includes a rich caching provider framework with
            <a href="http://docs.servicestack.net/caching">Redis, Memcached, Memory and File System-based cache providers</a>
            available.
        </p>
        <p>
            To compare the difference with caching enabled, below are the 'cached versions' of the REST services above.
        </p>

        <table>
            <thead>
                <tr>
                    <th></th>
                    <th>Path</th>
                    <th>Formats</th>
                    <th>Code</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th>All Customers</th>
                    <td><a href="cached/customers">cached/customers</a></td>
                    <td class="c3"><a href="cached/customers?format=json">json</a><a href="cached/customers?format=xml">xml</a><a href="cached/customers?format=html">html</a><a href="cached/customers?format=csv">csv</a><a href="cached/customers?format=jsv">jsv</a></td>
                    <td class="c4"><a href="https://github.com/binary2015nov/ServiceStack.Examples/blob/master/src/ServiceStack.Northwind/ServiceStack.Northwind.ServiceInterface/CachedServices.cs"><strong>CachedServices.cs</strong></a></td>
                </tr>
                <tr>
                    <th>Customer Maria Anders</th>
                    <td><a href="cached/customers/ALFKI">cached/customers/ALFKI</a></td>
                    <td class="c3"><a href="cached/customers/ALFKI?format=json">json</a><a href="cached/customers/ALFKI?format=xml">xml</a><a href="cached/customers/ALFKI?format=html">html</a><a href="cached/customers/ALFKI?format=csv">csv</a><a href="cached/customers/ALFKI?format=jsv">jsv</a></td>
                    <td class="c4">CachedServices.cs</td>
                </tr>
                <tr>
                    <th>Customer Maria Anders Orders</th>
                    <td><a href="cached/customers/ALFKI/orders">cached/customers/ALFKI/orders</a></td>
                    <td class="c3"><a href="cached/customers/ALFKI/orders?format=json">json</a><a href="cached/customers/ALFKI/orders?format=xml">xml</a><a href="cached/customers/ALFKI/orders?format=html">html</a><a href="cached/customers/ALFKI/orders?format=csv">csv</a><a href="cached/customers/ALFKI/orders?format=jsv">jsv</a></td>
                    <td class="c4">CachedServices.cs</td>
                </tr>
                <tr>
                    <th>Latest Orders</th>
                    <td><a href="cached/orders">cached/orders</a></td>
                    <td class="c3"><a href="cached/orders?format=json">json</a><a href="cached/orders?format=xml">xml</a><a href="cached/orders?format=html">html</a><a href="cached/orders?format=csv">csv</a><a href="cached/orders?format=jsv">jsv</a></td>
                    <td class="c4">CachedServices.cs</td>
                </tr>
                <tr>
                    <th>Latest Orders - page 2</th>
                    <td><a href="cached/orders/page/2">cached/orders/page/2</a></td>
                    <td class="c3"><a href="cached/orders/page/2?format=json">json</a><a href="cached/orders/page/2?format=xml">xml</a><a href="cached/orders/page/2?format=html">html</a><a href="cached/orders/page/2?format=csv">csv</a><a href="cached/orders/page/2?format=jsv">jsv</a></td>
                    <td class="c4">CachedServices.cs</td>
                </tr>
            </tbody>
        </table>

        <p>
            Note: The most optimal result is cached, i.e. if your browser supports gzip/deflate it will cache the compressed output.
            Caching also supports all user-defined formats.
        </p>

        <h2>Advantages of a convention-based Web Services framework</h2>
        <h4>Nothing but C#</h4>
        <p>
            The Northwind project is also an example of how much can be achieved with a minimal amount of effort and code.
            This entire website literally just consists of these three classes£º
            <strong>
                <a href="https://github.com/binary2015nov/ServiceStack.Examples/blob/master/src/ServiceStack.Northwind/ServiceStack.Northwind.ServiceInterface/CustomersService.cs">CustomersService.cs</a>
            </strong>¡¢
            <strong>
                <a href="https://github.com/binary2015nov/ServiceStack.Examples/blob/master/src/ServiceStack.Northwind/ServiceStack.Northwind.ServiceInterface/CustomerDetailsService.cs">CustomerDetailsService.cs</a>
            </strong>¡¢
            <strong>
            <a href="https://github.com/binary2015nov/ServiceStack.Examples/blob/master/src/ServiceStack.Northwind/ServiceStack.Northwind.ServiceInterface/OrdersService.cs">OrdersService.cs</a>
            </strong>. Everything else seen here is automatically provided by <a href="https://servicestack.net">ServiceStack</a> using a code-first, convention-based approach.
            ServiceStack can infer a richer intelligence about your services to better able to provide more generic and re-usable functionality for free!
        </p>
        <p>
            You're unlikley to ever see the same WCF SOAP service, generating a visually informative
            <a href="http://docs.servicestack.net/html5reportformat">HTML view</a> of your data,
            allow it to be exposed over <a href="metadata">REST-ful interfaces</a> or be able to export it to a <a href="http://docs.servicestack.net/csv-format">CSV</a> data file.
            With ServiceStack not only is this possible - it comes out-of-the-box, config-pain-free :)
        </p>
        <h4>Config-free, convention-based, pure C# model-driven, web services</h4>
        <p>
            No other config, code-gen are required and you do not need to learn any other artificial constructs and concepts to get started.
            The logic of your services simply live in a pure C#, dependency-free and testable class.
        </p>
        <h4>Get Started by un-learning WCF RPC</h4>
        <p>
            The initial difficulty to new developers coming to ServiceStack is having to <b>un-learn WCFs RPC</b> approach to web services.
            In our opinion the problem with WCF is not that it's an abstract walled-interface forcing you to develop all your Network services in.
        </p>
        <p>
            The main problem is it forcing all network requests to <b>marshal onto a C# method</b>, we believe is an un-natural fit, leading to the creation of slow, chatty APIs.
            ServiceStack believes this is an <a href="http://martinfowler.com/eaaCatalog/dataTransferObject.html">anti-pattern</a> which produces more friction then its preferred strong-typed DTO approach.
        </p>

    </div>

</body>
</html>
